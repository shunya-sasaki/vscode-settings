{
	"FastAPI main template": {
		"prefix": "py-fastapi-main",
		"scope": "python",
		"description": "FastAPI main application template.",
		"body": [
			"import importlib",
			"import importlib.util",
			"import os",
			"from contextlib import asynccontextmanager",
			"from pathlib import Path",
			"",
			"import psutil",
			"import uvicorn",
			"from fastapi import APIRouter",
			"from fastapi import FastAPI",
			"from fastapi.middleware.cors import CORSMiddleware",
			"from fastapi.requests import Request",
			"from fastapi.responses import HTMLResponse",
			"from fastapi.staticfiles import StaticFiles",
			"from fastapi.templating import Jinja2Templates",
			"",
			"from ${1:package_name}.models import AppConfig",
			"from ${1:package_name}.utils import CustomLogger",
			"from ${1:package_name}.utils import GitVersion",
			"",
			"config = AppConfig.from_jsonfile(\"config.json\")",
			"",
			"",
			"@asynccontextmanager",
			"async def lifespan(app: FastAPI):",
			"    \"\"\"Lifespan event for the FastAPI application.\"\"\"",
			"    if Path(\"./js\").exists():",
			"        app.mount(\"/js\", StaticFiles(directory=\"./js\"), name=\"\")",
			"    yield",
			"",
			"app = FastAPI(lifespan=lifespan, version=)",
			"app.add_middleware(",
			"    CORSMiddleware,",
			"    allow_origins=[\"*\"],",
			"    allow_credentials=True,",
			"    allow_methods=[\"*\"],",
			"    allow_headers=[\"*\"],",
			")",
			"routers: list[APIRouter] = []",
			"for router in routers:",
			"    app.include_router(router)",
			"",
			"",
			"@app.get(\"/\", response_class=HTMLResponse)",
			"def index_page(request: Request):",
			"    \"\"\"Render the index page.\"\"\"",
			"    if Path(\"./js\").exists():",
			"        templates = Jinja2Templates(directory=\"./js\")",
			"        return templates.TemplateResponse(\"index.html\", {\"request\": request})",
			"    else:",
			"        return HTMLResponse(\"NO GUI!\")",
			"",
			"",
			"@app.get(\"/version/\")",
			"def get_version() -> str:",
			"    \"\"\"Get the version of the application.\"\"\"",
			"    return app.version",
			"",
			"",
			"def start() -> None:",
			"    \"\"\"Run the FastAPI application.\"\"\"",
			"    if config.workers < 1:",
			"        # TODO",
			"        ncpu = os.cpu_count()",
			"        if ncpu is None:",
			"            workers = 1",
			"        else:",
			"            workers = (ncpu - 5) * 2 + 1",
			"    else:",
			"        workers = config.workers",
			"    uvicorn.run(",
			"        f\"src.{GitVersion.package_name()}.app.main:app\",",
			"        host=config.host,",
			"        port=config.port,",
			"        workers=workers,",
			"        log_config=CustomLogger.create_config(),  # type: ignore[call-arg],",
			"        log_level=config.log_level,",
			"        reload=False,",
			"    )",
			"",
			"",
			"def dev() -> None:",
			"    \"\"\"Run the FastAPI application in development mode.\"\"\"",
			"    src_dirpath = Path(\"../src\")",
			"    if not src_dirpath.exists():",
			"        includes = [src_dirpath.as_posix()]",
			"    else:",
			"        includes = []",
			"    uvicorn.run(",
			"        f\"src.{GitVersion.package_name()}.app.main:app\",",
			"        host=config.host,",
			"        port=config.port,",
			"        reload=True,",
			"        reload_includes=includes,",
			"        log_level=config.log_level,",
			"        workers=1,",
			"    )"
		]
	},
	"FastAPI AppConfig": {
		"prefix": "py-app-config",
		"scope": "python",
		"description": "FastAPI application configuration model.",
		"body": [
			"\"\"\"FastAPI application configuration model.\"\"\"",
			"",
			"from __future__ import annotations",
			"",
			"import json",
			"from pathlib import Path",
			"from typing import Literal",
			"",
			"from pydantic import BaseModel",
			"from pydantic import ConfigDict",
			"",
			"from ${1:package_name}.utils import FormatConverter",
			"",
			"",
			"class AppConfig(BaseModel):",
			"    \"\"\"Application configuration model.",
			"",
			"    Args:",
			"        host (str): Hostname for the application server.",
			"        port (int): Port number for the application server.",
			"        log_level (Literal[\"debug\", \"info\", \"warning\", \"error\"]):",
			"            Logging level for the application.",
			"    \"\"\"",
			"",
			"    model_config = ConfigDict(",
			"        alias_generator=FormatConverter.snake_to_camel, populate_by_name=True",
			"    )",
			"",
			"    host: str = \"localhost\"",
			"    port: int = 8000",
			"    log_level: Literal[\"debug\", \"info\", \"warning\", \"error\"] = \"info\"",
			"",
			"    @classmethod",
			"    def from_json(cls, config_json: dict) -> AppConfig:",
			"        \"\"\"Create an AppConfig instance from a JSON dictionary.\"\"\"",
			"        config = AppConfig.model_validate(config_json)",
			"        return config",
			"",
			"    @classmethod",
			"    def from_jsonfile(cls, config_file: str) -> AppConfig:",
			"        \"\"\"Create an AppConfig instance from a JSON file.\"\"\"",
			"        if not Path(config_file).exists():",
			"            raise FileNotFoundError(",
			"                f\"Configuration file {config_file} not found.\"",
			"            )",
			"        with open(config_file, \"r\") as file:",
			"            config_json = json.load(file)",
			"        return cls.from_json(config_json)",
			"",
			"    def to_jsonfile(self, config_file: str) -> None:",
			"        \"\"\"Save the AppConfig instance to a JSON file.\"\"\"",
			"        json_str = self.model_dump_json(indent=2, by_alias=True)",
			"        with open(config_file, \"w\") as fout:",
			"            fout.write(json_str)"
		]
	}
}
